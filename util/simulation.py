import logging
import os
import sys
import time
import uuid

from datetime import datetime, timezone
from paho.mqtt import client as mqtt


log_on_message: str = """<?xml version="1.0" encoding="utf-8"?>
<TechnicalVehicleLogOnRequestStructure version="1.0" xmlns:netex="http://netex-cen.org">
	<Timestamp>{timestamp}</Timestamp>
	<MessageId>{messageId}</MessageId>
	<netex:VehicleRef version="any">{vehicleRef}</netex:VehicleRef>
</TechnicalVehicleLogOnRequestStructure>
"""

gnss_physical_position_message: str = """<?xml version="1.0" encoding="utf-8"?>
<GnssPhysicalPositionDataStructure version="1.0">
        <Timestamp>{timestamp}</Timestamp>
        <TimestampOfMeasurement>{timestampOfMeasurement}</TimestampOfMeasurement>
        <PublisherId>ITCS435-SIMULATION</PublisherId>
        <GnssPhysicalPosition>
                <WGS84PhysicalPosition>
                        <Latitude>{latitude}</Latitude>
                        <Longitude>{longitude}</Longitude>
                </WGS84PhysicalPosition>
        </GnssPhysicalPosition>
</GnssPhysicalPositionDataStructure>
"""

coordinates: dict =  {
    '2': [  # Line 2, Pforzheim Bahnhofstra√üe - Pforzheim Sonnenhof
        (48.89337173640118, 8.701332009494536), (48.89321480624551, 8.701168089642124),
        (48.892800735156754, 8.700961032985902), (48.89257951768997, 8.700664826936674),
        (48.892303467170706, 8.700086793771902), (48.89207279364999, 8.6995864068532),
        (48.89190451475466, 8.699310331311153), (48.891755143125465, 8.699195299836049),
        (48.89166438546232, 8.699074516786226), (48.89166438546232, 8.698623018244774),
        (48.8917097697649, 8.698053602580643), (48.89171355133388, 8.697973080547797),
        (48.89171355133388, 8.697901185876503), (48.891715442118254, 8.697849421712476),
        (48.89178351031177, 8.697029822447945), (48.89191019253636, 8.696359764103335),
        (48.891989605110325, 8.695968657086183), (48.89202742057725, 8.695770227790263),
        (48.89204254675619, 8.6956206868729), (48.89201229439416, 8.695537289052027),
        (48.89169653427038, 8.695387748134635), (48.89078705744211, 8.695013901846039),
        (48.88985298324869, 8.695034035319566), (48.88927437831674, 8.694927634533599),
        (48.8892327790108, 8.694927634533599), (48.8892006340692, 8.694930510321626),
        (48.88917227086773, 8.694930510321626), (48.88914201676894, 8.69492475874685),
        (48.88912042146853, 8.69438762085386), (48.88927547359933, 8.693082013605675),
        (48.889354890415774, 8.691704511767995), (48.88944565178494, 8.690223481176616),
        (48.88944754265512, 8.68988413832352), (48.88944754265512, 8.68978060999541),
        (48.88944754265512, 8.689743224766431), (48.88944565178494, 8.689705839537396),
        (48.88930032260072, 8.688113469787766), (48.88920010608419, 8.686937272949677),
        (48.889082869194795, 8.685746696492743), (48.88896752513776, 8.684357691424935),
        (48.8889096254768, 8.683118628515189), (48.88890584369571, 8.681663480349528),
        (48.888746508925806, 8.680425230022252), (48.88852338261549, 8.679643015988034),
        (48.888513928088855, 8.679611382332496), (48.88850069174873, 8.679582624463706),
        (48.88849123721741, 8.679550990806916), (48.88822908723924, 8.678828641338555),
        (48.88770908255776, 8.677810612779382), (48.88717772673334, 8.676815590515446),
        (48.88673881241647, 8.675895087225769), (48.88637196237926, 8.674888561813589),
        (48.88580655421589, 8.67360596086192), (48.88526004669444, 8.672426886575437),
        (48.88511443728345, 8.672053034280054), (48.88508796279959, 8.6720098974763),
        (48.885072834516706, 8.671975388033985), (48.88505581519303, 8.671929375443455),
        (48.88503123171529, 8.671886238639644), (48.88501421237751, 8.671831598688868),
        (48.88498773784059, 8.671791337673028), (48.88450262393013, 8.670991887845872),
        (48.884071461030146, 8.67032182950129), (48.88370837359969, 8.669815691009063),
        (48.883402016529914, 8.669502230238038), (48.88311078714776, 8.669430334981797),
        (48.88282144650677, 8.669427459195049), (48.882537777586776, 8.669266415129385),
        (48.882225673808534, 8.668579006156534), (48.88176234155435, 8.667891693090098),
        (48.88118305773477, 8.667259584943992), (48.88068756540764, 8.666874229500422),
        (48.88006346503337, 8.666601029745124), (48.87911964498903, 8.666215610286287),
        (48.87902886439085, 8.666195479777741), (48.87896456136778, 8.666356523844655),
        (48.878907823337244, 8.666992072747007), (48.87813996167475, 8.66857088102094),
        (48.87804728799736, 8.668674409349023), (48.877644439201134, 8.66817689821707),
        (48.877623634714865, 8.668139512988034), (48.87759526494733, 8.668099251971),
        (48.87703046220463, 8.667646047576454), (48.87627213485416, 8.667239375555056),
        (48.876013016711454, 8.667052449407407), (48.875644196602536, 8.666275986947909),
        (48.87545883982847, 8.665697953783138), (48.87544749143237, 8.665669195913097),
        (48.8750831109312, 8.665087102652706), (48.87461971251125, 8.664825406045708),
        (48.87407686890293, 8.664954816455833), (48.87341864149721, 8.665811797459469),
        (48.87290037420567, 8.665814673007276), (48.872883350739755, 8.665797418285507),
        (48.87272446477914, 8.665877940318325), (48.87249571058513, 8.666478978563674),
        (48.872484361516456, 8.666513488007212), (48.87209281891495, 8.667370464690578),
        (48.87139910802901, 8.668357660315166), (48.87076873927586, 8.669279722047435),
        (48.8703246110677, 8.670252606079032), (48.869933010882164, 8.670993159596208),
        (48.86935515622986, 8.671254531425944), (48.86886325892627, 8.671000421038173),
        (48.86854805956861, 8.670717268222148), (48.86842388957902, 8.670143702263374),
        (48.868643574734904, 8.669780685833388), (48.868543283805195, 8.66968630156137),
        (48.86848119884297, 8.669700822218658)
    ],
    '743': [ # Line 743, Salmbach Friedhof - Pforzheim Leopoldplatz
        (48.81968670072942, 8.65279087563863), (48.820410515256924, 8.653599191913827),
    (48.820708553494654, 8.654035682702045), (48.82079370695138, 8.654116514329928),
    (48.820708553494654, 8.65421351228332), (48.821017234087265, 8.654488339816965),
    (48.821496217450004, 8.655425986695661), (48.82225193744668, 8.657495276359953),
    (48.82372076906839, 8.657818602870236), (48.82405485508593, 8.658111661841218),
    (48.82414000285746, 8.658127828166727), (48.82526819717248, 8.658774481186299),
    (48.82723715470826, 8.659081641371046), (48.82909757780416, 8.659424382019694),
    (48.83033208209679, 8.659359716717432), (48.831098310842265, 8.658858560626925),
    (48.83133243395537, 8.659489047320903), (48.83152398841585, 8.662334320610398),
    (48.83133243395537, 8.664888600040712), (48.83269187491064, 8.664412409238395),
    (48.834468998284194, 8.662698778734466), (48.835873626046606, 8.660888150278225),
    (48.83788911393941, 8.661071814024325), (48.83994504106599, 8.659228853674733),
    (48.84195079953514, 8.658044567543499), (48.844553959644315, 8.657606527008568),
    (48.846841319556034, 8.65773585761309), (48.848723429938616, 8.657982642737181),
    (48.8500425543819, 8.659114285522747), (48.851053150404084, 8.660698585422097),
    (48.85115952774623, 8.660827916026648), (48.85114889002216, 8.660633920119778),
    (48.851744599087425, 8.661603899650743), (48.852872425892286, 8.662590045317046),
    (48.853542575022544, 8.663075035081988), (48.85368085864698, 8.663172033035409),
    (48.85453182639114, 8.663026536105264), (48.855504769977614, 8.66184814428766),
    (48.856376979951904, 8.6614116534995), (48.85645143619686, 8.661233823919247),
    (48.85792990155804, 8.660651836200941), (48.85854680225012, 8.660457840294043),
    (48.858631891404116, 8.66042550764405), (48.860014567366704, 8.660069859631022),
    (48.86117386065382, 8.661266167718878), (48.862211945117565, 8.661943861023246),
    (48.86219067436403, 8.661766031443022), (48.86228639268339, 8.661846863069826),
    (48.86375405065715, 8.662008526325508), (48.86554463668796, 8.66140938120347),
    (48.866799511572026, 8.661457880179029), (48.86873493486581, 8.662767352545927),
    (48.870317936590055, 8.663447735785695), (48.87191295894192, 8.663641731691456),
    (48.8734653985324, 8.664045889828515), (48.87510285110241, 8.664660210198008),
    (48.876241962430214, 8.665254015916673), (48.87750720116904, 8.665642007729275),
    (48.87910199432369, 8.66619166279645), (48.88020776045775, 8.666616765469882),
    (48.8812602728176, 8.667295751140557), (48.88206824707572, 8.668249564345928),
    (48.88244033609456, 8.669041714295616), (48.88273800531661, 8.66936504080482),
    (48.88323766038465, 8.669445872432703), (48.88388614143372, 8.670044026476631),
    (48.88490649973676, 8.671660645708272), (48.885257306690846, 8.672533627285816),
    (48.885331719970736, 8.672662957889287), (48.8865010569713, 8.6752172373196),
    (48.88722082229637, 8.676908364674205), (48.88779484219148, 8.677894510529654),
    (48.88832633621922, 8.679155483919772), (48.888666489432495, 8.680173962426323),
    (48.88873026790222, 8.680367958332113), (48.88886845993781, 8.68223454918649),
    (48.8889216084535, 8.683560187877816), (48.88899601628066, 8.685144487777166),
    (48.889144831603204, 8.686534791770782), (48.889219239098225, 8.687779598834197),
    (48.88927238724105, 8.688119091670131), (48.88928301686289, 8.688313087575864),
    (48.88930554717331, 8.69212178153765), (48.88918862126161, 8.693770746739318),
    (48.88899554303683, 8.694926503277713), (48.88954828343523, 8.695185164485764),
    (48.89067500455499, 8.695185164485764), (48.890632487238065, 8.695055833882293),
    (48.89081318558618, 8.695168998160199), (48.891907991024055, 8.695573156298394),
    (48.89186547475563, 8.696850296012968), (48.891684780210625, 8.697755610241671)
    ]
}


if __name__ == "__main__":

    # set logging default configuration
    logging.basicConfig(format="[%(levelname)s] %(asctime)s %(message)s", level=logging.INFO)

    # set general publishing data
    vehicle_ref = 'TE-ST3'
    simulation_line_number: str = sys.argv[1]

    logging.info(f'Starting simulation for vehicle {vehicle_ref} on line {simulation_line_number} ...')

    client: mqtt.Client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, protocol=mqtt.MQTTv5, client_id='itcs435-simulation')

    mqtt_username: str = os.getenv('ITCS435_WORKER_MQTT_USERNAME', None)
    mqtt_password: str = os.getenv('ITCS435_WORKER_MQTT_PASSWORD', None)
    if mqtt_username is not None and mqtt_password is not None:
        client.username_pw_set(username=mqtt_username, password=mqtt_password)

    # connect to MQTT broker
    mqtt_host: str = os.getenv('ITCS435_WORKER_MQTT_HOST', 'test.mosquitto.org')
    mqtt_port: str = os.getenv('ITCS435_WORKER_MQTT_PORT', '1883')

    logging.info(f'Connecting to {mqtt_host}:{mqtt_port} ...')
    client.connect(mqtt_host, int(mqtt_port))
    client.loop_start()    

    # publish technical logon message
    logging.info('Publishing technical logon message ...')
    client.publish(
        'IoM/1.0/DataVersion/2025/Inbox/ItcsInbox/Country/de/any/Organisation/TEST/any/ItcsId/1/CorrelationId/1/RequestData',
        log_on_message.format(
            timestamp=datetime.now(timezone.utc).replace(microsecond=0).isoformat(),
            messageId=str(uuid.uuid4()),
            vehicleRef=vehicle_ref
        ),
        qos=2
    )

    # wait for vehicle logon
    time.sleep(5)

    for coordinate in coordinates[simulation_line_number]:
        # publish GNSS physical position message
        logging.info('Publishing GNSS physical position message ...')
        client.publish(
            'IoM/1.0/DataVersion/2025/Country/de/any/Organisation/TEST/any/Vehicle/{vehicleId}/any/PhysicalPosition/GnssPhysicalPositionData'.format(vehicleId=vehicle_ref),
            gnss_physical_position_message.format(
                timestamp=datetime.now(timezone.utc).isoformat(),
                timestampOfMeasurement=datetime.now(timezone.utc).replace(microsecond=0).isoformat(),
                latitude=coordinate[0],
                longitude=coordinate[1]
            ),
            qos=0,
            retain=True
        )

        # wait for 10s before publishing the next coordinate
        time.sleep(10)

    # Disconnect from the broker
    client.loop_stop()
    client.disconnect()

    logging.info('Simulation trip completed.')